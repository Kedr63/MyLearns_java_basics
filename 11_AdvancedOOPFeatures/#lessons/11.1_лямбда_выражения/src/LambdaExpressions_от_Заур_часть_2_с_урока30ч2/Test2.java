package LambdaExpressions_–æ—Ç_–ó–∞—É—Ä_—á–∞—Å—Ç—å_2_—Å_—É—Ä–æ–∫–∞30—á2;

// ‚ù§Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç–æ–¥—ã –õ–í

// –î–∂–µ–Ω–µ—Ä–∏–∫–∏ —Å–¥–µ–ª–∞–ª–∏ Java- –∫–æ–ª–ª–µ–∫—Ü–∏–∏ -> TypeSafe (–¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏), –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –õ–í –≤–º–µ—Å—Ç–µ —Å
// —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏ –ø—Ä–∏–¥–∞–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º —Å—É–ø–µ—Ä—Å–∏–ª—É. –¢–µ–ø–µ—Ä—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
// –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å–æ–¥–µ—Ä–∂–∞—Ç –≤ —Å–µ–±–µ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Ç–µ–ø–µ—Ä—å
// –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç–∏ –º–µ—Ç–æ–¥—ã —Å –ø–æ–º–æ—â—å—é –õ–í –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å—Ç–∞–ª–æ –≥–æ—Ä–∞–∑–¥–æ –ø—Ä–æ—â–µ.

// –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç—Ä–∏ –º–µ—Ç–æ–¥–∞

import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;

public class Test2 {
    public static void main(String[] args) {

        // üìå –ú–µ—Ç–æ–¥ /forEach/

        // –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–¥–∏–º ArrayList –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ list
        List<String> list = List.of("privet", "poka", "kak dela?", "vce normalno!");
        // –ï—Å–ª–∏ –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ –æ–¥–Ω–æ–º—É –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —ç—Ç–æ–≥–æ List-–∞, —á—Ç–æ–±—ã –º—ã –¥–µ–ª–∞–ª–∏?
        // –º—ã –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ for loop
        /*   for (String s : list){
                System.out.println(s);
        }*/
        // –ù–æ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –ø–æ –¥—Ä—É–≥–æ–º—É - –∏—Å–ø-–µ–º –õ–í, –≤ () –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞,
        // –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–∞–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ —ç—Ç–æ -String, –ø—É—Å—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç ~ /s/ -> —á—Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π
        // –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π? -> –º—ã –¥–æ–ª–∂–Ω—ã —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω.
        list.forEach(s -> System.out.println(s));    // –∏–ª–∏ ‚Üô –∞–Ω–∞–ª–æ–≥
        list.forEach(System.out::println);
        // —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –∏ –ø—Ä–∏ /for loop/. –í–æ—Ç —ç—Ç–æ—Ç –≤ () –ø–∞—Ä–∞–º–µ—Ç—Ä –º–µ—Ç–æ–¥–∞ forEach –≤ –≤–∏–¥–µ –õ–í, –º—ã
        // –±—É–¥–µ–º –ø—Ä–æ–¥–µ–ª—ã–≤–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞  list-–∞

        // üìå –ú–µ—Ç–æ–¥ /remove/

        ArrayList<Integer> al = new ArrayList<>();
        al.add(1);
        al.add(2);
        al.add(3);
        al.add(4);
        al.add(5);
        al.add(6);
        al.add(7);
        al.add(8);
        // —Ç–µ–ø–µ—Ä—å —É–¥–∞–ª–∏–º –∏–∑ —ç—Ç–æ–≥–æ ArrayList-–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é /removeIf/, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ü–µ–ª–æ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 3
        al.removeIf(element -> element % 3 == 0);
        // –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —á—Ç–æ –≤ predicate –º–µ—Ç–æ–¥ test –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        // –≤—ã–≤–µ–¥–µ–º ArrayList –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫ —É–¥–∞–ª–∏–ª–∏—Å—å —ç–ª–µ–º–µ–Ω—Ç—ã
        System.out.println(al);
        /*   –∫–æ–Ω—Å–æ–ª—å: [1, 2, 4, 5, 7, 8]  */

        // ‚¨Ü  —ç—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –∏ –ø–æ –¥—Ä—É–≥–æ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å: ‚¨á
        Predicate<Integer> p = element -> element % 3 == 0;
        al.removeIf(p);    // –∏ –µ—Å–ª–∏ –≤—ã–≤–µ—Å—Ç–∏, —Ç–æ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç
        /*   –∫–æ–Ω—Å–æ–ª—å: [1, 2, 4, 5, 7, 8]  */


        // üìå –ú–µ—Ç–æ–¥ /sort/

        // –ú—ã –±—É–¥–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ArrayList
        ArrayList<Integer> list1 = new ArrayList<>();
        list1.add(2);
        list1.add(7);
        list1.add(4);
        list1.add(1);
        list1.add(3);
        list1.add(6);
        list1.add(0);
        System.out.println("–¥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: " + list1);

        list1.sort((x, y) -> x.compareTo(y)); // sort –∂–¥–µ—Ç –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö Comparator, Comparator - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç,
        // –∏ –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ compareTo, —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏—Ç—å –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞.
        // –ú—ã –ø–∏—à–µ–º sort, –∏ –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º –õ–í:
        // –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ x –∏ y -> –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –æ–Ω–∏ –±—É–¥—É—Ç? - —Ç–∞–∫ –∫–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å ArrayList-–æ–º list1 –æ–Ω–∏
        // –±—É–¥—É—Ç <Integer>
        // –∏ –≤—ã–≤–µ–¥–µ–º —ç—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω:
        System.out.println("–ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: " + list1);
        /*    –∫–æ–Ω—Å–æ–ª—å:
        –¥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: [2, 7, 4, 1, 3, 6, 0]
        –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: [0, 1, 2, 3, 4, 6, 7]
         */

        // —Ç.–µ. —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ compareTo —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ–ª—å –∏–ª–∏
        // –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ - –∫–æ–≥–¥–∞ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç < –≤—Ç–æ—Ä–æ–≥–æ,
        // –ù–æ–ª—å - –∫–æ–≥–¥–∞ –æ–Ω–∏ —Ä–∞–≤–Ω—ã, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ - –∫–æ–≥–¥–∞ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç > –≤—Ç–æ—Ä–æ–≥–æ.
        // –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º–µ—Ç–æ–¥ /sort/ –º–æ–∂–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–º –∫–æ–ª–ª–µ–∫—Ü–∏—é.
        // –ï—Å–ª–∏ —Ö–æ—Ç–∏–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ç–æ –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞–∫ "–º–∏–Ω—É—Å" –ø–µ—Ä–µ–¥ 1-–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        list1.sort((x, y) -> -x.compareTo(y));
        System.out.println(list1);
        /*     –∫–æ–Ω—Å–æ–ª—å: [7, 6, 4, 3, 2, 1, 0]    */


        // üìå Scope of variable (–æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–Ω—ã—Ö)

        // –†–µ—á—å –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã—Ö –≤ –õ–í.
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤ —Å–µ–∫—Ü–∏–∏ (x, y) –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –∏—Ö –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
        // —ç—Ç–æ –≤—Å–µ –õ–í, –¥–∞–ª—å—à–µ –æ–Ω–∏ –ø–µ—Ä–µ—Å—Ç–∞—é—Ç –±—ã—Ç—å –≤–∏–¥–Ω—ã


    }
}
