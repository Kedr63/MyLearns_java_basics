package LambdaExpressions_–æ—Ç_–ó–∞—É—Ä_—á–∞—Å—Ç—å_2_—Å_—É—Ä–æ–∫–∞30—á2;

/* Var
 * Local variable type inference (–ø–µ—Ä–µ–≤. –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º—ã–µ, –∞ –≥–ª–∞–≥–æ–ª infer - –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥)
 * */
// –ò–¥–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∫–æ–¥–∞, —ç—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ —Ö–æ—Ä–æ—à–æ (–ø—Ä–æ–ø–∞–¥–∞–µ—Ç —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞)
// var - —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω–∞—è ~ —Ç–∏–ø–∞ inference
// Java —Å–∞–º–∞ –¥–µ–ª–∞–µ—Ç –≤—ã–≤–æ–¥ (infer) —á—Ç–æ –∑–∞ —Ç–∏–ø —É –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –Ω–∞–º –ø–∏—Å–∞—Ç—å —Å–∞–º —Ç–∏–ø –Ω–µ –Ω—É–∂–Ω–æ.
// –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –≤—Å–µ —ç—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —É–∂–µ —Å–∞–º –≤—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
// var - –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º

import java.util.ArrayList;

public class Test {
    public static void main(String[] args) {
        // TestInferenceType tit = new TestInferenceType();
        // –ß—Ç–æ–±—ã —Ç–∞–∫ ‚¨Ü –Ω–µ –ø–∏—Å–∞—Ç—å –º—ã –º–æ–∂–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫ ‚¨á
        var tit = new TestInferenceType();

        // –ü–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å
        var i = 10; // –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –ø–æ–Ω–∏–º–∞–µ—Ç —á—Ç–æ —ç—Ç–æ int
        var w = 1.5f; // –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –ø–æ–Ω–∏–º–∞–µ—Ç —á—Ç–æ —ç—Ç–æ float
        var array = new String[]{"a", "b"}; // –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –∑–∞–º–µ–Ω–∏—Ç var –Ω–∞ String
        var result = abc(); // ‚¨á –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –ø–æ–Ω–∏–º–∞–µ—Ç —á—Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç double -> –ø–æ—ç—Ç–æ–º—É result
        // –±—É–¥–µ—Ç double

        Object obj1 = "privet";
        var obj2 = obj1; // —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç —á—Ç–æ –∏ obj1 (obj2 —Ç–æ–∂–µ –±—É–¥–µ—Ç —Ç–∏–ø Object)

        ArrayList<String> al = new ArrayList<>();
        for (var s : al) {     // –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –ø–æ–Ω–∏–º–∞–µ—Ç —á—Ç–æ /al/ —Å–æ–¥–µ—Ä–∂–∏—Ç String-–∏, –ø–æ—ç—Ç–æ–º—É /s/ –±—É–¥–µ—Ç —Ç–∏–ø–∞ String
            System.out.println(s);
        }

        // –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫ –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å:
        // –ù–µ –º–æ–∂–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å –í–ù–ï –∫–∞–∫–æ–≥–æ-—Ç–æ –º–µ—Ç–æ–¥–∞,
        // –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–µ—Ç–æ–¥–∞ (),
        // –Ω–µ –º–æ–∂–µ–º —Ç–∞–∫ - var h; var = null;  var array2 = {1, 2, 3}

        // –ò –≤–æ–æ–±—â–µ var –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö, –Ω–∞–¥–æ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å —á—Ç–æ –∫–æ–¥ –¥–æ–ª–∂–µ–Ω
        // –±—ã—Ç—å —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å


    }

    // –¥–æ–ø—É—Å—Ç–∏–º –µ—Å—Ç—å –∫–∞–∫–æ–π-—Ç–æ –º–µ—Ç–æ–¥
    static double abc() {
        return 3.14;
    } // —Å–º. ‚¨Ü
}

class TestInferenceType {
}

// üìå –ü–µ—Ä–µ–π–¥–µ–º –∫ –õ–í —á–∞—Å—Ç—å_2

// Functional interface //

interface I {    // —ç—Ç–æ —Ñ—É–Ω—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Ç–∞–∫ –∫–∞–∫ –æ–¥–∏–Ω –∞–±—Å—Ç—Ä. –º–µ—Ç–æ–¥), –Ω–æ –≤ –Ω–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Ö–æ—Ç—å
    void abc();          // —Å–∫–æ–ª—å–∫–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∏ static –º–µ—Ç–æ–¥–æ–≤
    default void def(){}          // ‚Üµ
    default void def2(){}
    static void def3(){}
}
  // üîî –ï—â–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –¥–≤–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ : Consumer & Supplier (–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å & –ø–æ—Å—Ç–∞–≤—â–∏–∫)
// –°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å /Car/
