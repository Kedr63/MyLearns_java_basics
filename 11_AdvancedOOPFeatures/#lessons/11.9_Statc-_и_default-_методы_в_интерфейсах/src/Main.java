import java.util.Comparator;
import java.util.TreeSet;
import java.util.stream.Stream;

public class Main {
    public static void main(String[] args) {


        // По классике в интерфейсах методы создавать нельзя, но в Java их создавать можно.
        // Для чего это нужно?
        // Интерфейсы дублируют функционал абстрактных классов, но эта возможность создавать методы
        // в интерфейсах сделана для того чтобы сохранять обратную совместимость, чтоб в интерфейсе
        // можно было создать метод, который точно будет использоваться везде, но не ломать код
        // который был написан ранее и не застявлять все классы, которые уже были кем-то созданы
        // в существующих проектах, реализовывать еще какой-то дополнительный метод в связи с
        // обновлением версии Java-ы.

        // Создадим интерфейс Figure2D

        // Примеры стат. методов вы уже видели в Java-е, например есть интерфейс Comparator и него
        // есть всякие такие методы
        /*
        Comparator.comparing();
        Comparator.comparingInt();
        Comparator.comparingDouble();
        и т/д
        */
        // Или у него есть давно известный static - метод /reverseOrder/, который позволяет задать
        // обратный Comparator
        /*Comparator.reverseOrder()*/
        // Например, создадаим list, и хотим чтобы чтобы он был отсортирован в обратном порядке
        TreeSet<String> list = new TreeSet<>(Comparator.reverseOrder());

        // Или у интерфейса Stream есть стат. метод /of/, с помощью которого можно создать стрим
        // не создавая никаких объектов
        Stream.of(1, 2, 3, 4);


    }
}
