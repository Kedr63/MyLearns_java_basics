package Stream_–ó–∞—É—Ä_—Ä–∞–∑–¥–µ–ª7_Streams_—á–µ—Ä–Ω—ã–π–ü–æ—è—Å;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class Test12_collect {
    public static void main(String[] args) {

        // üìå –ú–µ—Ç–æ–¥ /collect/ (t)  ________________________________________________________

        // –ú—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –µ–≥–æ —á—Ç–æ–±—ã –ø–æ—Ç–æ–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –ª–∏—Å—Ç –∏–ª–∏ set, –∏–ª–∏ –¥—Ä—É–≥—É—é –∫–∞–∫—É—é-—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        // –ö–æ–≥–¥–∞ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥, –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ Collectors - –∫–ª–∞—Å—Å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –¥–≤–∞
        // –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –¥–ª—è –Ω–∞—Å –º–µ—Ç–æ–¥–∞:
        // üìç 1 - groupingBy
        // üìç 2 - partitioningBy

        //üìç 1 - groupingBy (–æ–∑–Ω–∞—á–∞–µ—Ç "–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ")
        Student st1 = new Student("Ivan", 'm', 22, 3, 8.3);
        Student st2 = new Student("Nikolay", 'm', 28, 2, 6.4);
        Student st3 = new Student("Elena", 'f', 19, 1, 8.9);
        Student st4 = new Student("Petr", 'm', 35, 4, 7);
        Student st5 = new Student("Maria", 'f', 23, 3, 9.1);
        List<Student> students = new ArrayList<>();
        students.add(st1);
        students.add(st2);
        students.add(st3);
        students.add(st4);
        students.add(st5);

        // –î–∞–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–∏–º –Ω–∞—à–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∏–º–µ–Ω–∞ –Ω–∞ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ –∫—É—Ä—Å–∞–º,
        // —Ç/–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞ —É –Ω–∞—Å –±—É–¥–µ—Ç —Å–≤–æ–π –ª–∏—Å—Ç
        /* students.stream()
                .map(el -> {
                    el.setName(el.getName()
                            .toUpperCase());
                    return el;
                }).collect(Collectors.groupingBy(el-> el.getCourse()));   */// –£ –∫–ª–∞—Å—Å–∞ Collectors –≤—ã–∑—ã–≤–∞–µ–º

        // –º–µ—Ç–æ–¥ /groupingBy/,
        // –≤ –∫–æ—Ç–æ—Ä–æ–º —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –∫–∞–∫–æ–º—É –∞—Ç—Ä–∏–±—É—Ç—É –º–æ–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —è –±—É–¥—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
        // (—è –±—É–¥—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ –∫—É—Ä—Å—É).
        // ‚¨Ü –¢/–µ —è —É–≤–µ–ª–∏—á–∏–ª –∏–º–µ–Ω–∞ –∏ –∑–∞–º–µ–Ω–∏–ª –∏—Ö –Ω–∞ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ –ø–æ—Ç–æ–º —è —Ö–æ—á—É —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        // –ø–æ –∫—É—Ä—Å—É.
        // –¢/–µ —É –Ω–∞—Å –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø–µ—Ä–≤–æ–≥–æ –∫—É—Ä—Å–∞, –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç –∫–æ—Ç–æ—Ä—ã–π
        // —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–æ –≤—Ç–æ—Ä–æ–≥–æ, —Ç—Ä–µ–π—Ç—å–µ–≥–æ –∏ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –∫—É—Ä—Å–æ–≤, —Ç/–µ —É –Ω–∞—Å –ø–æ–ª—É—á–∏—Ç—Å—è —á–µ—Ç—ã—Ä–µ –ª–∏—Å—Ç–∞,
        // –≤ –∫–∞–∂–¥–æ–º –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É, –ª–∏—à—å –≤ –æ–¥–Ω–æ–º –±—É–¥–µ—Ç –¥–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞.
        // –ò –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –≤–µ—Ä–Ω–µ—Ç collect ‚ûî –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç /map/, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç
        // Integer - –∫–∞–∫ –∫–ª—é—á, –∏ –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ - –ª–∏—Å—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ç/–µ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –≤ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ /map/
        // –±—É–¥–µ—Ç 4-—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞, –∞ —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–∞—Ä—É: –∫–ª—é—á - –∑–Ω–∞—á–µ–Ω–∏–µ (–∫–ª—é—á - —ç—Ç–æ –±—É–¥–µ—Ç
        // –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –ª–∏—Å—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤).
        // –ü–æ—ç—Ç–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —ç—Ç–æ–≥–æ –∫–æ–¥–∞ ‚¨Ü –º–æ–∂–µ–º –ø—Ä–∏—Å–≤–æ–∏—Ç—å /Map<Integer, List<Student>> map/ ‚¨á
        Map<Integer, List<Student>> map = students.stream()
                .map(el -> {
                    el.setName(el.getName()
                            .toUpperCase());
                    return el;
                })
                .collect(Collectors.groupingBy(el -> el.getCourse()));
        //–ï—â–µ —Ä–∞–∑ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç ‚¨Ü:
        // –£ –Ω–∞—Å –±—É–¥–µ—Ç 4 —ç–ª–µ–º–µ–Ω—Ç–∞ ->
        // üìç 1-–π —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª—é—á–æ–º - 1 (–ø–µ—Ä–≤—ã–π –∫—É—Ä—Å), –∞ –∑–Ω–∞—á–µ–Ω–∏–µ- —ç—Ç–æ –ª–∏—Å—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –Ω–æ –≤ –¥–∞–Ω–Ω–æ–º –ª–∏—Å—Ç–µ –±—É–¥–µ—Ç
        // –≤—Å–µ–≥–æ –ª–∏—à—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç "Elena".
        // üìç 2-–π —ç–ª–µ–º–µ–Ω—Ç /map/-–∞ —Å –∫–ª—é—á–æ–º- 2 (–≤—Ç–æ—Ä–æ–π –∫—É—Ä—Å), –∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∂–µ - —ç—Ç–æ –ª–∏—Å—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö
        // –≤—Å–µ–≥–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç.
        // –í—ã–≤–µ–¥–µ–º —ç—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω
        for (Map.Entry<Integer, List<Student>> entry : map.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue()
                    .toString());
        }
        /*–∫–æ–Ω—Å–æ–ª—å:
        1: [
        Student{name='ELENA', sex=f, age=19, course=1, avgGrade=8.9}]
        2: [
        Student{name='NIKOLAY', sex=m, age=28, course=2, avgGrade=6.4}]
        3: [
        Student{name='IVAN', sex=m, age=22, course=3, avgGrade=8.3},
        Student{name='MARIA', sex=f, age=23, course=3, avgGrade=9.1}]
        4: [
        Student{name='PETR', sex=m, age=35, course=4, avgGrade=7.0}]*/
        // 3-–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á -3 –∏ –ª–∏—Å—Ç –∏–∑ –¥–≤—É—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤....
        // –í–æ—Ç —Ç–∞–∫ –º—ã —Å–º–æ–≥–ª–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –ª–∏—Å—Ç—ã –ø–æ –∫—É—Ä—Å—É, –∞ —Å–∞–º –∫—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–æ–º –Ω–∞—à–µ–≥–æ /map/

        System.out.println();

        //-------------------------------------------------------------------
        // üìç 2 - partitioningBy  (–æ–∑–Ω–∞—á–∞–µ—Ç "—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ")
        // –ü–æ–¥–µ–ª–∏–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –¥–≤–µ –≥—Ä—É–ø–ø—ã: —Ç–µ –∫—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É –∏ —Ç–µ –∫—Ç–æ –Ω–∏–∑–∫—É—é (–≥—Ä–∞–Ω–∏—Ü–∞ –≤—ã—Å–æ–∫–æ–π –∏
        // –Ω–∏–∑–∫–æ–π –æ—Ü–µ–Ω–∫–∏ –±—É–¥–µ—Ç 7).
        // –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞: ‚¨á —Å—Ä–∞–∑—É –Ω–∞ —Å—Ç—Ä–∏–º–µ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ collect, –∏ –∑–¥–µ—Å—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º /partitioningBy/
        // –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç Predicate, —Ç/–µ —Ç–µ–ª–æ –õ–í –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean. –ò–∑-–∑–∞ —Ç–æ–≥–æ —á—Ç–æ –∑–¥–µ—Å—å ‚ûî
        // ‚ûî /el.avgGrade > 7/ - boolean, –¥–ª—è –∫–∞–∫–∏—Ö-—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —ç—Ç–æ –±—É–¥–µ—Ç true –∏–ª–∏ false, –ø–æ—ç—Ç–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        // –≤—Å–µ–≥–æ —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç map –∏–∑ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∫–ª—é—á–æ–º –±—É–¥–µ—Ç - boolean, –µ—Å–ª–∏ –∫–ª—é—á-true —É
        // —ç–ª–µ–º–µ–Ω—Ç–∞ /map/-–∞, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ /map/-–∞ –±—É–¥–µ—Ç /List<Student>/, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ä–æ—à–æ —É—á–∞—Ç—Å—è
        // (>7 –æ—Ü–µ–Ω–∫–∞). –ï—Å–ª–∏ false, —Ç–æ —É –¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ /map/-–∞ –±—É–¥–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ /List<Student>/, —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        // –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Ç—Å—è –ø–ª–æ—Ö–æ
        Map<Boolean, List<Student>> map1 = students.stream()
                .collect(Collectors.partitioningBy(el -> el.avgGrade > 7));

        for (Map.Entry<Boolean, List<Student>> entry : map1.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue()
                    .toString());
        }
        /*    –∫–æ–Ω—Å–æ–ª—å:
        false: [
        Student{name='NIKOLAY', sex=m, age=28, course=2, avgGrade=6.4},
        Student{name='PETR', sex=m, age=35, course=4, avgGrade=7.0}]
        true: [
        Student{name='IVAN', sex=m, age=22, course=3, avgGrade=8.3},
        Student{name='ELENA', sex=f, age=19, course=1, avgGrade=8.9},
        Student{name='MARIA', sex=f, age=23, course=3, avgGrade=9.1}]*/

        // ‚ù§Ô∏è–≠—Ç–∏ –º–µ—Ç–æ–¥—ã –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∏–º–æ–≤ –æ—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω—ã‚ùóÔ∏è

    }
}
