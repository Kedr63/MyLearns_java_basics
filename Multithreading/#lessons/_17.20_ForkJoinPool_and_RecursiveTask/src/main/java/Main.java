import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;

public class Main {
  /*     ForkJoinPool –∏ RecursiveTask  */
/** Fork –∏ Join —ç—Ç–æ –æ—Ç–≤–µ—Ç–≤–ª–µ–Ω–∏–µ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤. –û–Ω–æ –Ω—É–∂–Ω–æ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤
 * –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö. –ï—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ForkJoinPool, —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º
 * –¥–ª—è ForkJoinPool-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –≤ java. –í —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –º/—É —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏.
 * –°–Ω–∞—Ä—É–∂–∏ –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –≤ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ—Ç—É. –í ForkJoin-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–µ –ª—é–±–æ–π –ø–æ—Ç–æ–∫
 * –º–æ–∂–µ—Ç —Ä–∞–∑–≤–ª–µ—Ç–≤–ª—è—Ç—å—Å—è –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏, —Ç.–µ –≤–µ—Ç–≤–∏—Ç—Å—è (Fork) –∏ –¥–æ–∂–∏–¥–∞—Ç—å—Å—è –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ (Join)   */

/* –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫–∞–∫–∞—è-—Ç–æ –∑–∞–¥–∞—á–∞, —Å –ø–æ–º–æ—â—å—é ForkJoinPool –º—ã —Å–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∏–º –µ—ë –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –∏—Ö,
–ø–æ—Ç–æ–º –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –¥–µ–ª–∞–µ–º —ç—Ç–æ –≤—Å—ë —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ */

  /* –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–∏–º–µ—Ä: –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–µ—Ä–µ–≤–æ —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ —É–∑–ª–æ–≤, –µ—Å—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –∏ –µ—Å—Ç—å –¥–µ—Ç–∏ –∏ —É –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ –º–æ–∂–µ—Ç
   * –±—ã—Ç—å –∑–∞–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –Ω—É–∂–Ω–æ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –∑–Ω–∞—á–µ–Ω–∏–π –≤–æ –≤—Å–µ–º –¥–µ—Ä–µ–≤–µ.  */
}

interface Node {

  Collection<Node> getChildren();

  long getValue();
}

/* –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –Ω—É–∂–Ω–æ –æ–ø–∏—Å–∞—Ç—å –∫–ª–∞—Å—Å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏.
 * RecursiveTask - —ç—Ç–æ —Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç—å Future, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é —Å–≤–æ–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
 * –ò –∑–¥–µ—Å—å –Ω–∞–¥–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ compute(), –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ <Long> –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–∑–∞–¥–∞—á */

class NodeValueSumCalculator extends RecursiveTask<Long> {

  private Node node;

  public NodeValueSumCalculator(Node node) {
    this.node = node;
  }

  @Override
  protected Long compute() {
    long sum = node.getValue();
    List<NodeValueSumCalculator> taskList = new ArrayList<>();
    for (Node child : node.getChildren()) {
      NodeValueSumCalculator task = new NodeValueSumCalculator(child);
      /* –∏ –æ—Ç–≤–µ—Ç–≤–ª—è–µ–º —ç—Ç—É –∑–∞–¥–∞—á—É task —Å –ø–æ–º–æ—â—å—é fork() */
      task.fork();
      taskList.add(task);
    }
    for (NodeValueSumCalculator node : taskList) {
      sum += node.join();  /* join –¥–æ–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –∏–∑ —ç—Ç–∏—Ö –∑–∞–¥–∞—á –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫ */
    }
    return sum; /* –≤–µ—Ä–Ω–µ—Ç—Å—è —Å—É–º–º–∞ –ø–æ –≤—Å–µ–º –¥–µ—Ç—è–º. –ü–æ–∫–∞ –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∑–¥–µ—Å—å –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */
  }
}

/**
 * –ó–∞–ø—É—Å—Ç–∏–º —Ç–µ–ø–µ—Ä—å
 */
class Test {

  public static void main(String[] args) {
    Node root = null;
    Long sum = new ForkJoinPool().invoke(
        new NodeValueSumCalculator(root)); /* –≤—ã–∑–æ–≤–µ–º –∑–∞–¥–∞—á—É –æ—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞ root*/
    System.out.println(sum); /* –ü–æ–ª—É—á–∏–º –æ–±—â—É—é —Å—É–º–º—É –ø–æ –≤—Å–µ–º —É–∑–ª–∞–º */
  }
}

/* https://habr.com/ru/post/565924/ */
/** –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ ForkJoinPool.invoke() –ø–µ—Ä–µ–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –æ–¥–∏–Ω –∏–∑ –ø–æ—Ç–æ–∫–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ –ø—É–ª–∞.
 * –í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å üìå, —á—Ç–æ –º–µ—Ç–æ–¥ fork() –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –ø–æ—Ç–æ–∫, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç
 * –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ª—É–∂–∏—Ç –º–µ—Ç–æ–¥ join().üìç
 *
 * –û—Ç–≤–µ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ï—â—ë –æ–¥–∏–Ω –º–æ–º–µ–Ω—Ç:
 *________________________
 * –í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –º–µ—Ç–æ–¥ fork() –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –ø–æ—Ç–æ–∫, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
 *____________________________
 * –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, fork() –æ—Ç–ø—Ä–∞–≤–ª—è—è –∑–∞–¥–∞—á—É –≤ –ø–æ—Ç–æ–∫ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–ø—É—Å—Ç—å –∏ –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Ç–æ–≥–æ, –∫–æ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ –æ–Ω –µ–π –∑–∞–π–º—ë—Ç—Å—è)
 * –∏ –≤—ã–∑–æ–≤ join() –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —á—Ç–æ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–∏–º–µ—Ä–µ:
 *
 * */
