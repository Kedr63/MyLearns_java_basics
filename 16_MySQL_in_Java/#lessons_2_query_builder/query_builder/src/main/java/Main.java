import com.mysql.cj.x.protobuf.MysqlxCrud;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Root;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.boot.Metadata;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import jakarta.persistence.EntityManager;
import org.hibernate.type.StandardBasicTypes;

import java.util.Arrays;
import java.util.List;
import java.util.Map;


public class Main {
    /* Hibernate query builder –∏ —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ HQL (hibernate query language) */
   /* –ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ —á–∞—Å—Ç–æ –Ω—É–∂–Ω—ã —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã*/


    public static void main(String[] args) {
        StandardServiceRegistry registry = new StandardServiceRegistryBuilder()
                .configure("hibernate.cfg.xml").build();
        Metadata metadata = new MetadataSources(registry).getMetadataBuilder().build();
        SessionFactory sessionFactory = metadata.getSessionFactoryBuilder().build();


        Session session = sessionFactory.openSession();

         Course course1 = session.get(Course.class, 1); // —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        /* –ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ —á–∞—Å—Ç–æ –Ω—É–∂–Ω—ã —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ó–¥–µ—Å—å –º—ã –Ω–µ –º–æ–∂–µ–º –≤–∑—è—Ç—å –∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å sql-–∑–∞–ø—Ä–æ—Å
        * –ï—Å—Ç—å 2 —Å–ø–æ—Å–æ–±–∞ –¥–µ–ª–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ hibernate:
        * üìç –∫–ª–∞—Å—Å QueryBuilder
        * üìç —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ hql   */

        /* –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–ª–∞—Å—Å QueryBuilder: */
        CriteriaBuilder builder = session.getCriteriaBuilder();
        /* –î–æ–ø—É—Å—Ç–∏–º —Ö–æ—Ç–∏–º –∫—É—Ä—Å—ã –ø–æ–ª—É—á–∞—Ç—å */
        CriteriaQuery<Course> query = builder.createQuery(Course.class);
        Root<Course> root = query.from(Course.class);
        query.select(root);
        List<Course> courseList = session.createQuery(query).getResultList();

        /* –ò —Ä–∞—Å–ø–µ—á–∞—Ç–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤: */
        for (Course course : courseList){
            System.out.println(course.getName());
        }
        /* –í—ã—Å–∫–æ—á–∏—Ç –æ—à–∏–±–∫–∞. –£—Å—Ç—Ä–∞–Ω–∏–º –µ–µ –∏–∑–º–µ–Ω–∏–≤ –≤ –∫–ª–∞—Å—Å–µ Course /private int studentsCount/ –Ω–∞ / private Integer studentsCount/,
        * –ø–æ—Ç–æ–º—É —á—Ç–æ int –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω null  */






        //___–ú–æ–∏ —ç–∫–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å HQL_______________________________________________________
        // (https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-conditional-expressions)

        List<Student> students = session.createQuery("from Student", Student.class).getResultList();
        for (Student student : students){
            System.out.println("student: " + student);
        }
        System.out.println("—Ä–∞—Å–ø–µ—á–∞—Ç–∞–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤");

        // –º–æ–∂–Ω–æ —Ç–∞–∫ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤—ã—à–µ)
        List<Student> students1 = session.createQuery("select s from Student s", Student.class).getResultList();
        for (Student student : students1){
            System.out.println("student: " + student);
        }
        System.out.println("—Ä–∞—Å–ø–µ—á–∞—Ç–∞–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤");

        // –º–æ–∂–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞
        List<String> studentNames = session.createQuery("from Student s select s.name", String.class).getResultList();
        for (String name : studentNames){
            System.out.println("student name: " + name);
        }
        System.out.println("—Ä–∞—Å–ø–µ—á–∞—Ç–∞–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤");

        // abs()
        //–í–µ–ª–∏—á–∏–Ω–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        List<Integer> abs = session.createQuery("select abs(s.age) " +
                                "from Student s ", Integer.class).getResultList();
        System.out.println("ABS age: " + abs);

        // predicate –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π ___________________________________________________________________________
        List<Student> studentList = session.createQuery("select s from Student s " +
                                "where s.age < 30 ", Student.class).getResultList();
        System.out.println("Student < 30: ");
        for (Student student : studentList){
            System.out.println(student);
        }

        // predicate –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å—Ç—Ä–æ–∫
        List<Student> studentList1 = session.createQuery("select s from Student s " +
                "where s.name like '–¶–∞%' ", Student.class).getResultList();
        System.out.println("Student with name begin '–¶–∞ ': ");
        for (Student student : studentList1){
            System.out.println(student);
        }

        List<Object[]> studentList2 = session.createQuery("select distinct st, sb " +
                                "from Student st, Subscription sb " +
                                "where sb.student = st and sb is not null", Object[].class).getResultList();
        System.out.println("Object[]");
        for (Object [] objects : studentList2){
            System.out.println(Arrays.stream(objects).toList());
        }

        /* –í—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Criteria. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –Ω–∞–ø–∏—Å–∞–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ —Å –ø–æ–º–æ—â—å—é –æ–±—ä–µ–∫—Ç–æ–≤) */

        // –ü—Ä–∏–º–µ—Ä 543. –í—ã–±–æ—Ä –∫–æ—Ä–Ω–µ–≤–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
        // (https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#criteria)
        CriteriaBuilder builder1 = session.getCriteriaBuilder();
        CriteriaQuery<Student> query1 = builder1.createQuery(Student.class);
        Root<Student> root1 = query1.from(Student.class);
        // –≤—ã–±–µ—Ä–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ 36
        query1.select(root1).where(builder1.greaterThan(root1.get("age"), 36));
        // –≤—ã–±–µ—Ä–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
     //   criteria.where(builder1.equal(root1.get("name"), "–ù–æ—Å–æ–≤ –ú–∞–∫–∞—Ä")); // you must use the entity field names and not the database column names

        List<Student> studentList3 = session.createQuery(query1).getResultList();
        System.out.println("Criteria");
        for (Student student : studentList3){
            System.out.println(student);
        }


        // –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ SQL-–∑–∞–ø—Ä–æ—Å—ã
        System.out.println("–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ SQL-–∑–∞–ø—Ä–æ—Å—ã");
        List<Object[]> listStudents = session.createNativeQuery("SELECT * FROM Students").getResultList();
        for (Object [] obs : listStudents){
            System.out.println(Arrays.stream(obs).toList());
        }


        // Hibernate —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–∞
        System.out.println("Hibernate —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–∞");
        List<Object[]> studentsList1 = session.createNativeQuery(
                        "SELECT id, name FROM Students").list();

        for(Object[] student : studentsList1) {
            int id = (int) student[0];
            String name = (String) student[1];
            System.out.println(id + " " + name);
        }

        // Hibernate —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —è–≤–Ω—ã–º –≤—ã–±–æ—Ä–æ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞
        System.out.println("Hibernate —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —è–≤–Ω—ã–º –≤—ã–±–æ—Ä–æ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞");
        List<Object[]> studentsList = session.createNativeQuery(
                        "SELECT * FROM Students")
                .addScalar("id", StandardBasicTypes.INTEGER)
                .addScalar("name", StandardBasicTypes.STRING)
                .list();

        for(Object[] student : studentsList) {
            int id = (int) student[0];
            String name = (String) student[1];
            System.out.println(id + " " + name);
        }


        sessionFactory.close(); // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ —Å–µ—Å—Å–∏—é
    }
}
