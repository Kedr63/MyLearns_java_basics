import java.time.LocalDateTime;
import java.util.List;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.boot.Metadata;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;


public class Main {
    /* –°–æ–∑–¥–∞–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –≤ –ë–î: –°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å LinkedPurchaseList –∏ –∫–ª–∞—Å—Å KeyLinkedPurchaseList. –ü—Ä–æ–ø–∏—à–µ–º –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    * —ç—Ç–∏ –¥–≤–∞ –∫–ª–∞—Å—Å–∞
    * <mapping class="LinkedPurchaseList"/>
      <mapping class="KeyLinkedPurchaseList"/>
      *
        * –∏ –∏–∑–º–µ–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Å validate –Ω–∞ update:
        * <property name="hbm2ddl.auto">update</property>
        *
        * –ò –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ main –≤ –ë–î –ø–æ—è–≤–∏—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ LinkedPurchaseList*/

  public static void main(String[] args) {
    StandardServiceRegistry registry = new StandardServiceRegistryBuilder().configure(
        "hibernate.cfg.xml").build();
    Metadata metadata = new MetadataSources(registry).getMetadataBuilder().build();
    SessionFactory sessionFactory = metadata.getSessionFactoryBuilder().build();

    Session session = sessionFactory.openSession();

    Transaction transaction = session.beginTransaction();

    // –°–æ–∑–¥–∞–Ω–Ω–∞—è Hibernate-–æ–º —Ç–∞–±–ª–∏—Ü–∞ LinkedPurchaseList –∏–º–µ–µ—Ç –ø–æ–ª—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ (course_id, student_id) - –Ω–∞—Å
    // —Ç–∞–∫–æ–π –ø–æ—Ä—è–¥–æ–∫ –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –ø–æ –∑–∞–¥–∞–Ω–∏—é –Ω—É–∂–Ω–æ –Ω–∞–æ–±–æ—Ä–æ—Ç (student_id, course_id),
    // –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ—Å–æ–∑–¥–∞–¥–∏–º —Ç–∞–±–ª–∏—Ü—É LinkedPurchaseList
    String dropTable = "DROP Table " + LinkedPurchaseList.class.getSimpleName();
    session.createNativeQuery(dropTable, LinkedPurchaseList.class).executeUpdate();

    String createTable = "Create Table " + LinkedPurchaseList.class.getSimpleName()
        + " (`student_id` INT NOT NULL, `course_id` INT NOT NULL, PRIMARY KEY (`student_id`, `course_id`), UNIQUE(`student_id`, `course_id`))";
    session.createNativeQuery(createTable, LinkedPurchaseList.class).executeUpdate();


    // üìç –æ—á–∏—Å—Ç–∏–º —Ç–∞–±–ª–∏—Ü—É PurchaseList —á—Ç–æ–± –¥–∞–ª–µ–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–µ—Å–ª–∏ –∏–∑–º–µ–Ω—è–ª–∏ –≤–¥—Ä—É–≥ –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã)
    String hqlDeleteDatePurchaseList = "DELETE FROM " + PurchaseList.class.getSimpleName();
    session.createNativeQuery(hqlDeleteDatePurchaseList, PurchaseList.class).executeUpdate();

    // üìç –∏ —Ç–∞–∫–∂–µ –æ—á–∏—Å—Ç–∏–º —Ç–∞–±–ª–∏—Ü—É LinkedPurchaseList —á—Ç–æ–± –¥–∞–ª–µ–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã PurchaseList
    String hqlDeleteDateLinkedPurchaseList =
        "DELETE FROM " + LinkedPurchaseList.class.getSimpleName();
    session.createNativeQuery(hqlDeleteDateLinkedPurchaseList, LinkedPurchaseList.class)
        .executeUpdate();


    // üìç –∑–∞–ø–æ–ª–Ω–∏–º —Ç–∞–±–ª–∏—Ü—É PurchaseList —Å –ø–æ–º–æ—â—å—é —Ç–∞–±–ª–∏—Ü Subscriptions –∏ Students
    String sql = "From " + Student.class.getSimpleName();
    List<Student> studentList = session.createQuery(sql, Student.class).list();

    for (Student st : studentList) {
      String nameStudent = st.getName();
      int studentId = st.getId(); // –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã LinkedPurchaseList
      List<Subscription> subscriptions = st.getSubscriptions();

      for (Subscription subscription : subscriptions) {
        String nameCourse = subscription.getCourse().getName();
        LocalDateTime dateSubscription = subscription.getSubscriptionDate();
        int priceCourse = subscription.getCourse().getPrice();
        PurchaseList purchaseList = new PurchaseList(nameStudent, nameCourse, priceCourse,
            dateSubscription);
        session.persist(purchaseList);
        // üìç –∏ –∑–∞–ø–æ–ª–Ω–∏–º —Ç–∞–±–ª–∏—Ü—É linkedPurchaseList
        int courseId = subscription.getCourse().getId();
        LinkedPurchaseList linkedPurchaseList = new LinkedPurchaseList(studentId, courseId);
        session.persist(linkedPurchaseList);
      }
    }

    // —Ä–∞—Å–ø–µ—á–∞—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É LinkedPurchaseList
    String hqlGetLinkedPurchaseList = "FROM " + LinkedPurchaseList.class.getSimpleName();
    List<LinkedPurchaseList> linkedPurchaseLists = session.createQuery(hqlGetLinkedPurchaseList,
        LinkedPurchaseList.class).list();
    System.out.printf("%12s %12s %n", "student_id", "course_id");
    for (LinkedPurchaseList lpl : linkedPurchaseLists) {
      System.out.printf("%7d %14d %n", lpl.getStudentId(), lpl.getCourseId());
    }

    transaction.commit();
    sessionFactory.close();

    System.out.println("Ready");
  }
}

