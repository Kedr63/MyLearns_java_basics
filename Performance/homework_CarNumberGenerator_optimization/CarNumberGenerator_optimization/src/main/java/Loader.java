import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class Loader {

  private static final int regionCode = 199;
  private static final char[] letters = {'–£', '–ö', '–ï', '–ù', '–•', '–í', '–ê', '–†', '–û', '–°', '–ú', '–¢'};
  private static final int RANGE_OF_DIGITS_IN_NUMBERS = 999; // –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–∏—Ñ—Ä –¥–ª—è –∞–≤—Ç–æ –Ω–æ–º–µ—Ä–æ–≤ –æ—Ç [1 - 999]

  public static void main(String[] args) throws Exception {

    int countCoresProcessor = Runtime.getRuntime().availableProcessors(); // –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä –≤ –∫–æ–º–ø
    ExecutorService executorService = Executors.newFixedThreadPool(countCoresProcessor); // —Å–æ–∑–¥–∞–¥–∏–º pool –ø–æ—Ç–æ–∫–æ–≤

    long start = System.currentTimeMillis();

    int rangeForHandling = RANGE_OF_DIGITS_IN_NUMBERS / countCoresProcessor; // –¥–∏–∞–ø–∞–∑–æ–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ—Ç–æ–∫–∞
    int lastRangeForHandling = RANGE_OF_DIGITS_IN_NUMBERS % countCoresProcessor; // –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏

    int indexForStartRange = 1;

    for (int i = 0; i < countCoresProcessor; i++) {
      CarNumberFactory numberFactory = new CarNumberFactory(letters, indexForStartRange,
          rangeForHandling, regionCode, i + 1, start);
      executorService.execute(numberFactory);   // –∑–∞–ø—É—Å—Ç–∏–º –∑–∞–¥–∞—á—É

      indexForStartRange = indexForStartRange + rangeForHandling; // —É–≤–µ–ª–∏—á–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–æ–º–µ—Ä–æ–≤

      if (lastRangeForHandling != 0 && i == countCoresProcessor - 1) {
        executorService.execute(
            new CarNumberFactory(letters, indexForStartRange, lastRangeForHandling, regionCode,
                i + 2, start));
      }
    }

    executorService.shutdown();

    // –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –≤—Å–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∞—Ç —Å–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. (–ø–æ—Ö–æ–∂ –Ω–∞ join)
    executorService.awaitTermination(2, TimeUnit.SECONDS);

    System.out.println("total time finished after start:  " + (System.currentTimeMillis() - start)
        + " ms. –†–∞–±–æ—Ç–∞–ª –ø–æ—Ç–æ–∫: " + Thread.currentThread().getName());

  }

  /**üìå –ü–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å—Ç–∞–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ 13-14 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ (—Å 3500 –º—Å –¥–æ 260 –º—Å).
   * 1. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –º–µ—Ç–æ–¥ padNumber(): —É–±—Ä–∞–Ω for loop, –∫–æ—Ç–æ—Ä—ã–π –∫–∞–∂–¥—ã–π —Ä–∞–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
   *    int i = 0, –∏ –ø—Ä–æ–≤–æ–¥–∏–ª –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é —Å—Ç—Ä–æ–∫ —Å–ª–æ–∂–µ–Ω–∏–µ–º —Å—Ç—Ä–æ–∫ (—á—Ç–æ –∑–∞—Ç—Ä–∞—Ç–Ω–æ).
   *    –í–º–µ—Å—Ç–æ for loop –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –∏ –ø—Ä–∏ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç StringBuilder.
   *    –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Å–ª–µ —ç—Ç–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ, –Ω–æ –≤—Å–µ—Ä–∞–≤–Ω–æ —ç—Ç–æ –±–æ–ª–µ–µ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.
   *
   * 2. –û—Å–Ω–æ–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –≤ —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∏–º–µ—é—â–∏—Ö—Å—è –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ —è–¥–µ—Ä,
   *    –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏–º–µ–Ω–∏–ª thread pool, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª 8 –ø–æ—Ç–æ–∫–æ–≤. –ù–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å
   *    –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏, –∏ —ç—Ç–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏ —Ä–∞—Å—Ö–≤–∞—Ç–∞–ª–∏ –ø–æ—Ç–æ–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏, –∫–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
   *    –≤ —Å–≤–æ–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (–∑–∞–ø–∏—Å–∞–ª–æ—Å—å 9 —Ñ–∞–π–ª–æ–≤)  */



}
