import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;

public class Loader {

    private static SimpleDateFormat birthDayFormat = new SimpleDateFormat("yyyy.MM.dd");
    private static SimpleDateFormat visitDateFormat = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss");

    private static HashMap<Integer, WorkTime> voteStationWorkTimes = new HashMap<>();
    private static HashMap<Voter, Integer> voterCounts = new HashMap<>();

    public static void main(String[] args) throws Exception {
        String fileName = "Performance/VoteAnalyzer/res/data-1M.xml";

        parseFile(fileName);

        //Printing results
        System.out.println("Voting station work times: ");
        for (Integer votingStation : voteStationWorkTimes.keySet()) {
            WorkTime workTime = voteStationWorkTimes.get(votingStation);
            System.out.println("\t" + votingStation + " - " + workTime);
        }

        System.out.println("Duplicated voters: ");
        for (Voter voter : voterCounts.keySet()) {
            Integer count = voterCounts.get(voter);
            if (count > 1) {
                System.out.println("\t" + voter + " - " + count);
            }
        }
    }

    private static void parseFile(String fileName) throws Exception {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        Document doc = db.parse(new File(fileName)); // –∑–¥–µ—Å—å –ø–æ–ª—É—á–∏–º –ø—Ä–æ–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –≤–µ—Å—å —Ñ–∞–π–ª Xml –ø–æ–º–µ—â–µ–Ω–Ω—ã–π –≤ Document

        findEqualVoters(doc);
        fixWorkTimes(doc);
    }

    // –∏ –∑–¥–µ—Å—å –±—É–¥–µ–º —Ö–æ–¥–∏—Ç—å –ø–æ –ø—Ä–æ–ø–∞—Ä—Å–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É Document –∏ –∏—Å–∫–∞—Ç—å –Ω–∞—à–∏ —Ç—ç–≥–∏
    private static void findEqualVoters(Document doc) throws Exception {
        NodeList voters = doc.getElementsByTagName("voter");
        int votersCount = voters.getLength();
        for (int i = 0; i < votersCount; i++) {
            Node node = voters.item(i);
            NamedNodeMap attributes = node.getAttributes();

            String name = attributes.getNamedItem("name").getNodeValue();
            Date birthDay = birthDayFormat
                .parse(attributes.getNamedItem("birthDay").getNodeValue());

            Voter voter = new Voter(name, birthDay);
            Integer count = voterCounts.get(voter);
            voterCounts.put(voter, count == null ? 1 : count + 1);
        }
    }

    private static void fixWorkTimes(Document doc) throws Exception {
        NodeList visits = doc.getElementsByTagName("visit");
        int visitCount = visits.getLength();
        for (int i = 0; i < visitCount; i++) {
            Node node = visits.item(i);
            NamedNodeMap attributes = node.getAttributes();

            Integer station = Integer.parseInt(attributes.getNamedItem("station").getNodeValue());
            Date time = visitDateFormat.parse(attributes.getNamedItem("time").getNodeValue());
            WorkTime workTime = voteStationWorkTimes.get(station);
            if (workTime == null) {
                workTime = new WorkTime();
                voteStationWorkTimes.put(station, workTime);
            }
            workTime.addVisitTime(time.getTime());
        }
    }
}

// üìå –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–ª–µ—Ç–∞–µ—Ç –ø–æ –ø–∞–º—è—Ç–∏ - —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?
/** –ï—Å—Ç—å –¥–≤–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—É—Ç–∏
 *   1. –£–≤–µ–ª–∏—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å (–µ—Å–ª–∏ –µ–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç) –∏ –≤ Edit Configurations —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä -Xmx500M (–ø–æ—Å—Ç–∞–≤–∏–ª -Xmx16g)
 *      –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, —Ç.–µ. –¥–æ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–≤–æ–µ–π –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏, –ª–∏–±–æ –µ—Å–ª–∏ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –µ–≥–æ –±–æ–ª—å—à–µ —Ç–æ –±—É–¥—É—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å
 *      –≤—Ä–µ–º–µ–Ω–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –∂–µ—Å—Ç–∫–æ–º –¥–∏—Å–∫–µ (—Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–µ —Å–≤–æ–ø), –∞ —ç—Ç–æ –Ω–µ —Ö–æ—Ä–æ—à–æ —Ç–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–æ—Ä–∞–∑–¥–æ –¥–æ–ª—å—à–µ —á–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å.
 *          –ö–æ–Ω–µ—á–Ω–æ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞ —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ —Ä–µ—à–∏—Ç—å, —Ç–æ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å
 *          –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å —ç–∫–æ–Ω–æ–º–Ω–æ - –ø–æ—Ä—Ü–∏–æ–Ω–Ω–æ.
 *      –£—Ä–æ–∫ _–ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è_: –ú—ã —á–∏—Ç–∞–ª–∏ xml-—Ñ–∞–π–ª –≤ DOM –º–æ–¥–µ–ª—å –≤ –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Document. –ù–æ –¥–ª—è xml-—Ñ–∞–π–ª–æ–≤ –µ—Å—Ç—å –¥–≤–∞ –≤–∏–¥–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤ - —ç—Ç–æ
 *      DOM –ø–∞—Ä—Å–µ—Ä –∏ SAX-–ø–∞—Ä—Å–µ—Ä (Simple API for XML) -(–º–µ—Ç–æ–¥ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è xml-—Ñ–∞–π–ª–∞)  */


/** üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DOM, –∞ –∫–æ–≥–¥–∞ SAX üìå

 –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ
 —Ç—Ä–∞—Ç–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Ç–æ –≤–∞—à –≤—ã–±–æ—Ä ‚Äì DOM, –µ—Å–ª–∏ –∂–µ –≤–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Äì —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –ø–∞–º—è—Ç–∏, —Ç–æ DOM –Ω–µ –ª—É—á—à–∏–π –≤—ã–±–æ—Ä,
 —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ XML —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë. –ü–æ—Ç–æ–º—É, –º–µ—Ç–æ–¥ SAX –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –º–µ–Ω–µ–µ –∑–∞—Ç—Ä–∞—Ç–Ω—ã–π.

 üìå –ö–æ—Ä–æ—Ç–∫–æ: –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äì SAX, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å ‚Äì DOM.  */