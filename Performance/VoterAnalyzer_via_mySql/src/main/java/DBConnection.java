import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;

public class DBConnection {

    private static Connection connection;

    private static String dbName = "learn";
    private static String dbUser = "root";
   // private static String dbPass = "ya78yrc8n4w3984";
   private static String dbPass = "2805";

    public static Connection getConnection() {
        if (connection == null) {
            try {
                connection = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/" + dbName +
                        "?user=" + dbUser + "&password=" + dbPass);
                /*connection = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/" + dbName, dbUser, dbPass);*/
                connection.createStatement().execute("DROP TABLE IF EXISTS voter_count");
                connection.createStatement().execute("CREATE TABLE voter_count(" +
                    "id INT NOT NULL AUTO_INCREMENT, " +
                    "name TINYTEXT NOT NULL, " +
                    "birthDate DATE NOT NULL, " +
                    "`count` INT NOT NULL, " +
                    "PRIMARY KEY(id), " +
                    "UNIQUE KEY name_date(name(50), birthDate))"); // —Å–æ–∑–¥–∞–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
              // "UNIQUE KEY name_date(name(50), birthDate))"
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return connection;
    }

    public static void countVoter(String name, String birthDay) throws SQLException {
        birthDay = birthDay.replace('.', '-');
        String sql =
            "SELECT id FROM voter_count WHERE birthDate='" + birthDay + "' AND name='" + name + "'";
        ResultSet rs = DBConnection.getConnection().createStatement().executeQuery(sql);
      // –µ—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç —Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏, —Ç–æ –≤—Å—Ç–∞–≤–∏–º —Ç–∞–∫—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î
      // (–ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ next –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–æ–π; –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –¥–µ–ª–∞–µ—Ç –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–æ–π –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.)
        if (!rs.next()) {
            DBConnection.getConnection().createStatement()
                .execute("INSERT INTO voter_count(name, birthDate, `count`) VALUES('" +
                    name + "', '" + birthDay + "', 1)");
          // –∏–Ω–∞—á–µ –µ—Å–ª–∏ –µ—Å—Ç—å —É–∂–µ –≤ –ë–î —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å, —Ç–æ –æ–±–Ω–æ–≤–∏–º —É voter-–∞ count
        } else {
            Integer id = rs.getInt("id");
            DBConnection.getConnection().createStatement()
                .execute("UPDATE voter_count SET `count`=`count`+1 WHERE id=" + id);
        }
        rs.close();  // –µ—Å–ª–∏ –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä—É–µ–º, —Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏, ResultSet-—ã –Ω–∞—á–Ω—É—Ç –∫–æ–ø–∏—Ç—å—Å—è –≤ –ø–∞–º—è—Ç–∏ –Ω–µ –∑–∞–∫—Ä—ã—Ç—ã–µ –∏ –ø–∞–º—è—Ç—å –∏—Ö –æ—á–∏—â–∞—Ç—å
                     // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –±—É–¥–µ—Ç –∏ –ø–æ–ª—É—á–∏–º –æ—à–∏–±–∫—É OutOfMemory. –û—á–µ–Ω—å –≤–∞–∂–Ω–æ! –ö–æ–≥–¥–∞ —á—Ç–æ—Ç–æ –¥–µ–ª–∞–µ–º —Å –ë–î –≤ –∫–æ–Ω—Ü–µ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∏
                     // ResultSet-—ã –∏ –ø–æ —Ö–æ—Ä–æ—à–µ–º—É Connection-—ã, –µ—Å–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ Connection-–æ–≤ (—ç—Ç–æ —É–∂–µ –Ω–µ —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏), –ª—É—á—à–µ –Ω–∞ –æ–¥–Ω—É –ø—Ä–æ–≥—Ä–∞–º–º—É
                     // –¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    }
  /** –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –≤—ã—à–µ, —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º */
  public static void countVoterOptimize(String name, String birthDay) throws SQLException {
    birthDay = birthDay.replace('.', '-');
    // –≤ mySql (—á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å—ã) –µ—Å—Ç—å —Å–ø–æ—Å–æ–± —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ , -> —Å–¥–µ–ª–∞–µ–º –¥–≤–∞ –ø–æ–ª—è (name –∏ birthDay) —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º, –∏ –ø—Ä–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–º
    // –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—é–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î, –ø–æ –∏–¥–µ–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –æ—à–∏–±–∫–∞, –Ω–æ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ /DUPLICATE KEY UPDATE/ –∏
    // –¥–ª—è –Ω–µ–≥–æ –ø–∏—à–µ–º —á—Ç–æ –¥–æ–ª–∂–Ω—ã —Å–¥–µ–ª–∞—Ç—å –∫–æ–≥–¥–∞ —Å—Ç–∞–ª–∫–∏–≤–∞–µ–º—Å—è —Å —Ç–∞–∫–æ–π –æ—à–∏–±–∫–æ–π. –ü–æ–ª—É—á–∞–µ—Ç—Å—è –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∫–ª—é—á –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –∏–Ω–¥–µ–∫—Å–µ, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
    // –∫ –ø–æ–ª—é count +1
    String sql = "INSERT INTO voter_count (name, birthDate, `count`) VALUES('" + name + "', '" + birthDay +"', 1) "
        + "ON DUPLICATE KEY UPDATE `count`=`count` + 1";
    DBConnection.getConnection().createStatement().execute(sql);

  }

    public static void printVoterCounts() throws SQLException {
        String sql = "SELECT name, birthDate, `count` FROM voter_count WHERE `count` > 1";
        ResultSet rs = DBConnection.getConnection().createStatement().executeQuery(sql);
        while (rs.next()) {
            System.out.println("\t" + rs.getString("name") + " (" +
                rs.getString("birthDate") + ") - " + rs.getInt("count"));
        }
        rs.close();
    }

  /** üìå –î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É: SELECT * FROM voter_count WHERE name='–ê—Ä—Ç—É—Ä –ü–∏—Ä–æ–∂–∫–æ–≤', –ø–æ–∏—Å–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–º –ø–µ—Ä–µ–±–æ—Ä–æ–º –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ë–î. –ò –Ω–∞–º
   * –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –ø–æ –Ω–∏–º –±—ã—Å—Ç—Ä–æ (–ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è). –î–æ–±–∞–≤–∏–º –∏–Ω–¥–µ–∫—Å –Ω–∞ –ø–æ–ª–µ 'name' /KEY(name(50))/,
   * –∏ –¥–æ–±–∞–≤–∏–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∫–ª—é—á, —Ç–∞–∫–∂–µ –∫–∞–∫ –∏ id
   *   connection.createStatement().execute("CREATE TABLE voter_count(" +
   *                     "id INT NOT NULL AUTO_INCREMENT, " +
   *                     "name TINYTEXT NOT NULL, " +
   *                     "birthDate DATE NOT NULL, " +
   *                     "`count` INT NOT NULL, " +
   *                     "PRIMARY KEY(id), KEY(name(50))");     //–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–ª–∏–Ω—É
   *
   *   –ò–Ω–¥–µ–∫—Å—ã –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤, –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å HASH-—Ç–∏–ø–∞, –º–æ–∂–Ω–æ BTREE (—ç—Ç–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –±—É–¥–µ—Ç –∏–Ω–¥–µ–∫—Å–∞–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö HashMap –∏ TreeMap –∏–ª–∏
   *   HashSet –∏ TreeSet, –≤ –æ–¥–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –±—É–¥–µ—Ç hash-—Ñ—É–Ω–∫—Ü–∏—è –≤ –¥—Ä—É–≥–æ–º B-–¥–µ—Ä–µ–≤–æ), –±—ã–≤–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –ø–æ –¥–≤—É–º –ø–æ–ª—è–º —Å—Ä–∞–∑—É –∏ –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º
   *   –ø–æ–∏—Å–∫ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—è–º, –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π —Ç–æ–∂–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ: –µ—Å–ª–∏ —É –ø–æ–ª—è –º–∞–ª–æ –∑–Ω–∞—á–µ–Ω–∏–π —Ç–æ –ª—É—á—à–µ —á—Ç–æ–±—ã –æ–Ω–æ —Å—Ç–æ—è–ª–æ –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä,
   *   –µ—Å–ª–∏ —É –Ω–∞—Å –∑–¥–µ—Å—å –∏–º—è –∏ –¥–∞—Ç–∞, —Ç–æ –ª—É—á—à–µ —á—Ç–æ–±—ã –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ —Å—Ç–æ—è–ª–∞ –¥–∞—Ç–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–∑ 120 –º–∏–ª–∏–æ–Ω–æ–≤ —á–µ–ª–æ–≤–µ–∫ –¥–∞—Ç—ã —É –Ω–∞—Å —Ç–æ—á–Ω–æ –±—É–¥—É—Ç
   *   –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è –Ω–µ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ, –∞ –∏–º–µ–Ω–∞ –∑–¥–µ—Å—å –≥–æ—Ä–∞–∑–¥–æ —Ä–µ–∂–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è. –ò –µ—Å–ª–∏ –∑–¥–µ—Å—å –¥–∞—Ç–∞ –±—É–¥–µ—Ç –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ, —Ç–æ –¥–µ—Ä–µ–≤–æ –ø–æ–∏—Å–∫–∞ —Ç–∞–∫
   *   –Ω–∞–∑—ã–≤–∞–µ–º–æ–µ, –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ, –ø–æ –Ω–µ–º—É –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –∏—Å–∫–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ.
   *
   *     üìå –ó–∞–ø—Ä–æ—Å—ã –±—ã–≤–∞—é—Ç –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–µ, –∏ –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫–∞–∫–æ–π-—Ç–æ –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π —Å–µ–ª–µ–∫—Ç, —Ç–æ –ª—É—á—à–µ –µ–≥–æ –≤—ã–∑–≤–∞—Ç—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º EXPLAIN, –æ–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç
   *      –ø–æ–Ω—è—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å, –∫–∞–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏ –≤ –∫–∞–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
   *
   *      */
}
