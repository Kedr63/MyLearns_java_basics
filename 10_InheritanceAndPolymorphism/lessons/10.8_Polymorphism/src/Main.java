import figures.Circle;
import figures.Figure;
import figures.Square;

import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        /* Полиморфизм */
        // Примерно уже было показано в уроке про интерфейсы: у всех фигур будут два этих метода
        // double getVisibleHeight();
        // double getVisibleWidth();
        // имеющих разную реализацию - это и есть тот самый полиморфизм

        // что он позволяет делать?
        // он позволяет иметь набор объектов разных классов, но одного интерфейса
        ArrayList<Figure> squares = new ArrayList<>();
        squares.add(new Circle(445));
        squares.add(new Square(45));

        // у которых, по сути, мы можем вызывать одни и те же методы
        // и дальше, можем взять и вызывать у них один и тот же метод ->

        for (Figure figure : squares) {
            System.out.println(figure.getVisibleHeight());
        }
        // Это можно не только с интерфейсами проделывать, можно и с АК, и род. классами, которые не абстрактные,
        // но у которых есть потомки
        // Но, тем не менее, это свойство ООП позволяет нам иметь одинаковую спецификацию, т.е. методы одинаково
        // называются, одинаковые параметры принимают на вход и одинаковые значения возвращают (одинаковых типов),
        // но имеют разную реализацию - это называется полиморфизм


    }

}
