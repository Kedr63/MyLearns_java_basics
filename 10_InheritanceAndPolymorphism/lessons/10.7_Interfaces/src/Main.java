import figures.Circle;
import figures.Figure;

public class Main {
    public static void main(String[] args) {
        /* Интрефейсы */

        // Интерфейсы нужны в тех случаях, когда нам не нужно создавать их экземпляры
        // (это по сути как классы), но нам нужно задать в них какие-то контракты.
        // В интерфейсах нет переменных, а могут быть только по сути абстрактные методы (методы,
        // которые не реализованы).
        // Представим что есть какой-то АК "Figure2D"
        // и наш графический редактор может поддерживать и 3D графику, поэтому создадим еще АК для
        // 3D фигур "Figure3D" и создадим в нем методы
        // Если какие-то классы будут реализовывать нашу 3D фигуру, то они должны будут реализовать
        // методы АК "Figure3D"
        // Например, есть (создадим) - сфера Sphere и отнаследуем от "Figure3D"

        // И хорошо бы иметь методы (в рамках плоского холста что-то делать с фигурами),
        // чтобы понять какого размера фигуры на холсте -> соответственно создадим интерфейс "Figure"
        // и зададим там два метода
        // и наши фигуры должны будут реализовать (implements) интерфейс "Figure"
        // Обратить внимание: несмотря на то что АК "Figure2D" имплементирует интерфейс "Figure"
        // он не должен реализовывать методы интерфейса "Figure", поскольку он АК,
        // а вот все наследники должны будут реализовать методы интерфейса "Figure"
        // У "Square" не надо, поскольку у его родителя они реализованы

        // Для чего это нужно?
        // Например нам нужно вообще работать с фигурами
        Figure figure = getNext();
        // И получаем какую-то фигуру и точно знаем что у нее есть два параметра:
        figure.getVisibleHeight();
        figure.getVisibleWidth();
        // И мы можем эту фигуру каким-то образом использовать на нашем холсте, потому что
        // мы знаем ее видимую ширину и высоту (вот для этого нужны интерфейсы)
    }
    // есть метод который возвращает эти фигуры
    public static Figure getNext(){
        return new Circle(67);
    }
}
