public class Main {
    public static void main(String[] args) {
        // Абстрактные классы (АК) - нужны тогда, когда нам нужно где-то хранить переменные
        // и реализацию методов, но создавать экземпляры такого класса либо нет необходимости,
        // либо нужно запретить это делать, чтоб можно было создавать наследники от этого класса
        // и создавать уже объекты от этих наследников
        // Например: создадим еще одну фигуру * Circle *
        // и представим что у всех этих фигур могут быть цвета, и нам надо иметь возможность
        // задавать цвета этим фигурам, но у каждой фигуры прописывать методы setColor, getColor
        // и переменные - это неправильно, поэтому нам нужно иметь какой-то обобщающий класс.
        // Давайте назовем его - Figure
        // И все наши классы отнаследуем от класса Figure, и соотв-но у них у всех появятся
        // setColor и getColor
        // Класс Square наследовать от Figure не имеет смысла, поскольку он отнаследован от
        // класса Rectangle, который мы отнаследуем от класса Figure
        // И Rectangle и класс Square приобретут методы setColor и getColor
        // Но, смотрите, вот мы работаем с реальными фигурами и создавать абстрактную фигуру
        // нам совершенно нет небходимости, брать и делать так
        /*  Figure figure = new Figure();  */ // нам не надо,
        //  мы хотим запретить пользователям наших классов или нашей библиотеки классов
        // это делать, поскольку логика программы это не предусматривает, и мы должны написать
        // "abstract class Figure", для того чтобы нельзя было его использовать
        // И теперь написать так
        /*  Figure figure = new Figure();  */
        // мы не можем (не можем создать объект абстрактного класса)
        // Т.е. АК создан только для того, чтобы создавать наследников этого класса
        // Можем еще сделать абстрактный метод
        /*  public abstract double getSquare();  */ //без тела { }
        // для того чтобы все наследники класса могли считать свою площадь, но каждая по своему
        // Абстрактные методы (АМ) созданы для того, чтобы их здесь -> (Figure) задать
        // и обязать все классы наследники эти методы реализовать, т.е. теперь все классы наследники
        // будут требовать реализации этого метода


        /* Follow the white rabbit */
        // Абстрактный класс - это общие характеристики (поля/методы) определенной группы объектов.
        // Чтобы их не повторять - выносят в абстрактный класс.
        // Супер-класс - это класс от которого вы наследуетесь.
        // Интерфейс - это метод или набор методов, до 8 джавы - методы без реализации.
        // Абстрактный класс может наследоваться от другого абстрактного класса, 'приобретая' его поля и методы,
        // а так же может реализовывать интерфейс ('приобретать метод/-ы').
        // 'Приобретать' - это весьма условно, они и так у него  по-сути есть.

        // Зачем создавать абстрактный метод? Смысл в пустом методе?
        // Не проще сразу в классе наследнике его создать?
        // Ответ:
        // от Follow the white rabbit
        // Для того чтобы задать поведение для группы объектов, а так же сделать объекты менее связанными между
        // собой, взаимодействуя с ними через абстракцию  (аб.классы/интерфейсы).
        // К примеру, есть АК "ЛЕТАЮЩИЙ АППАРАТ", в котором есть абстрактный метод fly.
        // Такое "описание" говорит о том, что все классы/объекты которые хотят относиться
        // к "летающим аппаратам" (самолет, вертолет, нло) обязаны реализовать данный метод. Это первое.
        // Второе, мы можем работать с этими объектами через абстракцию:
       /* public void foo (ЛетающийАппарат объектСамолета){
            реализация
            }
        .
          public void foo (ЛетающийАппарат объектВертолета){
            реализация
            }
        .
          public void foo (ЛетающийАппарат объектНло){
            реализация
            }  */
    }
}
