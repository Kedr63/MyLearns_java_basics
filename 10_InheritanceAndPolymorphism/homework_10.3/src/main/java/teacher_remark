  10 августа 2021, 10:21
  Приветствую!

  // объявим константу - снятие 1% с суммы к пополнению
    protected static final double DEBIT_ONE_PERCENT_OF_AMOUNT_TO_PUT = 0.99;

    // объявим константу - снятие 0,5% с суммы к пополнению
    protected static final double DEBIT_HALF_PERCENT_OF_AMOUNT_TO_PUT = 0.995;

    // объявим константу - снятие 1% с суммы к снятию
    protected static final double DEBIT_ONE_PERCENT_OF_AMOUNT_TO_TAKE = 1.01;

    // объявим константу - сумма когда процент меняется
    protected static final double AMOUNT_WHEN_PERCENT_CHANGE = 1000;

Родителю нет необходимости знать детали реализации своих наследников - может быть наоборот, но не так.



    private double amount = getAmount();

Нам нет необходимости определять еще одно свойство - это противоречит смыслу наследования.
У нас есть родитель - базовый счет с балансом - мы, как наследник, хотим унаследовать это состояние
и добавить свои, специфические детали - так как комиссии.

_______________
Александр Шабалин
11 августа 2021, 19:29
Добрый день, Захар!

Исправил ДЗ, единственное меня настораживаем момент что переменная в родительском классе

protected double amount;
теперь более доступна - (по всему пакету).

 https://gitlab.skillbox.ru/shabalin_aleksandr/java_basics/-/commit/bccc2f1eb2e17f6c27dd554b1d5df1ea68b5da7d

 ________________
 Захар Разживин
 12 августа 2021, 10:52
 Приветствую!

 теперь более доступна - (по всему пакету).

 Мы можем этого избежать :) Давайте сделаем ее приватной. А наследники пусть работают через базовые методы
 клиента для изменения баланса.

 _________________
 Александр Шабалин
 12 августа 2021, 13:31
 Добрый день!

 https://gitlab.skillbox.ru/shabalin_aleksandr/java_basics/-/commit/6ff30ca521da01733a87b90b8f825d59b564e18d

 __________________
 Захар Разживин
 12 августа 2021, 14:22
 Отлично. Был еще второй вариант. Вместо добавление сеттера для баланса можно было использовать методы put/take из родителя - super.put() / super.take() - то есть вы посчитали новую сумму с учетом комиссий на уровне наследника, а затем вызвали базовую реализацию.

 Согласны?

 ___________________
 Александр Шабалин
 12 августа 2021, 15:34
 Согласен. Тогда методы put/take уже будут реализованы в родителе, останется только один абстрактный
 метод printInformation()

 https://gitlab.skillbox.ru/shabalin_aleksandr/java_basics/-/commit/89dbf5ce0c5502105511f29459ff79c13081bd21

 ___________________
 Захар Разживин
 12 августа 2021, 15:53
 То что нужно. Доп. задание по абстрактным методам -

 Предлагаю сделать абстрактные методы, которые возвращают сумму комиссии для снятия
 getWithdrawalComission(double amount) и для пополнения getDepositComission(double amount)

 protected abstract double getWithdrawalComission(double amount);



 Это методы будут вызываться в базовом классе, чтобы учитывать различные комиссии наследников
 (то есть мы расширяем базовую реализацию поддержкой комиссий через абстрактные методы).

 В классах-наследниках мы будем определять эти 2 метода. Тем самым мы получим более гибкую модель,
 а так же избавимся от дублирования кода.

 ___________________
 Александр Шабалин
 13 августа 2021, 09:16
 Добрый день!

 https://gitlab.skillbox.ru/shabalin_aleksandr/java_basics/-/commit/30b279d167f30beed5ce7794598f3d406c2181dd

 см. второй вариант задания (2_case)

 _________________
 Захар Разживин
 13 августа 2021, 18:11
 Приветствую!

 Можно пойти еще дальше) Попробуйте избавить от переопределения методов put / take.
 Наша задача написать по одной базовой реализации, которые будут учитывать все требования.

 __________________
Александр Шабалин
16 августа 2021, 15:03
Добрый день!

Не легко далось конечно)

https://gitlab.skillbox.ru/shabalin_aleksandr/java_basics/-/commit/7f6a8681404bd817e5de2f4f458e7887efbdd588

Тесты также успешно проходят

см. третий вариант задания (three_case)

___________________
Захар Разживин
17 августа 2021, 13:25
Добрый день!

Ну зато доп. задание выполнено, и выполнено абсолютно верно! ;)

Отличная работа