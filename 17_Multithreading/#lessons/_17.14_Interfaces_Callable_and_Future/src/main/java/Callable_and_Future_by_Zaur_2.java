import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class Callable_and_Future_by_Zaur_2 {
  /*  */
}

class CallableFactorial3 {

  static int factorialResult3;

  public static void main(String[] args) {
    ExecutorService executorService3 = Executors.newSingleThreadExecutor();
    Factorial3 factorial3 = new Factorial3(5);
    Future<Integer> future = executorService3.submit(factorial3);
    try {
      System.out.println(future.isDone());
      System.out.println("Xotim poluchit rezultat");
      factorialResult3 = future.get();
      System.out.println("Poluchili rezultat");
      System.out.println(future.isDone());
    } catch (InterruptedException e) {
      throw new RuntimeException(e);
    } catch (ExecutionException e) {
      System.out.println(e.getCause());
    } finally {
      executorService3.shutdown();
    }
    System.out.println(factorialResult3);
  }
}

class Factorial3 implements Callable<Integer> {  /* –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å Integer */

  int f;

  public Factorial3(int f) {
    this.f = f;
  }

  @Override
  public Integer call() throws Exception {
    if (f <= 0) {
      throw new Exception("vi veli ne vernoe chislo");
    }
    int result = 1;
    for (int i = 1; i <= f; i++) {
      result *= i;
      Thread.sleep(1000);
    }
    return result;
  }
}
/**
 * üìå –ß—Ç–æ –∂–µ —Ç–∞–∫–æ–µ Future? –ö–æ–≥–¥–∞ –º—ã –¥–µ–ª–∞–µ–º submit –∏ –æ–Ω –Ω–∞–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Future, -> —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã
 * –Ω–∞—à–µ–≥–æ —Ç–∞—Å–∫–∞ –≤–æ Future –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç - –æ–Ω –±—É–¥–µ—Ç –≤ –±—É–¥—É—â–µ–º, –∫–æ–≥–¥–∞ —Ç–∞—Å–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è,
 * –ø–æ—ç—Ç–æ–º—É —Ç–∞–∫ –∏ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è - Future (–±—É–¥—É—â–µ–µ). –ò –∫–æ–≥–¥–∞ –º—ã –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å –∏–∑ Future —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 * –Ω–∞—à–µ–≥–æ —Ç–∞—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ get(), –∞ —ç—Ç–æ—Ç —Ç–∞—Å–∫ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É, –Ω–∞—à Thread, –∫–æ—Ç–æ—Ä—ã–π
 * –≤—ã–∑–≤–∞–ª get(), —Ç.–µ main –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ, –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —Ç–∞—Å–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è,
 * —Ç.–µ. –ø–æ–∫–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª –Ω–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –∏ Future –Ω–µ –≤–µ—Ä–Ω–µ—Ç –Ω–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.  –ü–æ—á–µ–º—É –∑–¥–µ—Å—å —É–∂–µ –Ω–µ –Ω–∞–¥–æ
 * –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å awaitTermination() –º–µ—Ç–æ–¥? –ö–æ–≥–¥–∞ –º—ã –¥–æ–π–¥–µ–º –¥–æ System.out.println(factorialResult3);
 * factorialResult3 —É–∂–µ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É awaitTermination –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
 *
 * üìå –ú–µ—Ç–æ–¥ submit() –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ–º —Å Runnable —Ç–æ–∂–µ, –Ω–æ –æ–Ω –±—É–¥–µ—Ç –≤–æ–∑—Ä–∞—â–∞—Ç—å null,
 * —Ç.–∫. run() –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑—Ä–∞—â–∞–µ—Ç. –ö–∞–∫–æ–π —Ç–æ–≥–¥–∞ —Å–º—ã—Å–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å submit —Å Runnable? –° –µ–≥–æ –ø–æ–º–æ—â—å—é –º—ã
 * –º–æ–∂–µ–º –¥–µ–ª–∞—Ç—å cancel –Ω–∞—à–µ–≥–æ —Ç–∞—Å–∫–∞ –∏–ª–∏ —É–∑–Ω–∞–≤–∞—Ç—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –µ–≥–æ —Ä–∞–±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é isDone()

 */

/* –ü–æ–∫–∞ –≤–µ—Å—å —Ç–∞—Å–∫ –Ω–µ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞—à –ø–æ—Ç–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è */
/*üìç –∫–æ–Ω—Å–æ–ª—å */
/* false
   Xotim poluchit rezultat
   Poluchili rezultat
   true
   120   */

/* –≠—Ç–æ –µ—â–µ –Ω–µ –≤—Å–µ –¥–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω Future, —Å –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ –º—ã –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –Ω–∞—à —Ç–∞—Å–∫, —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞
 * isDone() */


/** üìå –ú–æ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –æ—Ç–º–µ—Ç–∏—Ç—å:
 *  üìç Runnable –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Å ExecutorService-–º–∏ —Ç–∞–∫ –∏ –ø—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ Thread
 *  üìç Callable —Ç–æ–ª—å–∫–æ —Å ExecutorService-–º–∏
 * –ï—Å–ª–∏ –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ —á—Ç–æ–± —Ç–∞—Å–∫ –≤–æ–∑–≤—Ä–∞—â–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Runnable, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ–± –≤–æ–∑–≤—Ä–∞—â–∞–ª - Callable */

/* –ï—â–µ –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä –Ω–∞ Callable */
/* –ú—ã –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å—É–º–º—É —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 1 –º–∏–ª–∏–∞—Ä–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É–ª—ã –∏ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —ç—Ç–æ 10-—é –ø–æ—Ç–æ–∫–∞–º–∏ —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –¥–µ–ª–∞–ª —Å–ª–æ–∂–µ–Ω–∏–µ:
1 –ø–æ—Ç–æ–∫ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –æ—Ç 1 –¥–æ 100_000_000, 2 –ø–æ—Ç–æ–∫ –æ—Ç 100_000_001 –¥–æ—è 200_000_000 –∏ —Ç–¥ –∏ 10 –ø–æ—Ç–æ–∫ –æ—Ç 900_000_001 –¥–æ 1_000_000_000 */
class SumNumbers {

  private static long value = 1_000_000_000L;
  private static long sum = 0;

  public static void main(String[] args) throws ExecutionException, InterruptedException {
    ExecutorService executorService = Executors.newFixedThreadPool(10);
    List<Future<Long>> futureResult = new ArrayList<>();
    /* –ü–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —á—Ç–æ–± —Ä–∞–∑–±—Ä–æ—Å–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ 10 —Ç–∞—Å–∫–æ–≤ */
    long valueDividedDy10 = value / 10;
    for (int i = 0; i < 10; i++) {
      long from = valueDividedDy10 * i + 1;
      long to = valueDividedDy10 * (i + 1);
      PartialSum partialSum = new PartialSum(from, to);
      Future<Long> futurePartSum = executorService.submit(partialSum);
      futureResult.add(futurePartSum);
    }
    for (Future<Long> result : futureResult) {
      sum += result.get();
    }
    executorService.shutdown();
    System.out.println("Total sum = " + sum);
  }
}

class PartialSum implements Callable<Long> {

  long from;
  long to;
  long localeSum;

  public PartialSum(long from, long to) {
    this.from = from;
    this.to = to;
  }

  public Long call() {
    for (long i = from; i <= to; i++) {
      localeSum += i;
    }
    System.out.println("Sum from " + from + " to " + to + "= " + localeSum);
    return localeSum;
  }
}
/* console:
Sum from 300000001 to 400000000= 35000000050000000
Sum from 200000001 to 300000000= 25000000050000000
Sum from 1 to 100000000= 5000000050000000
Sum from 100000001 to 200000000= 15000000050000000
Sum from 600000001 to 700000000= 65000000050000000
Sum from 900000001 to 1000000000= 95000000050000000
Sum from 700000001 to 800000000= 75000000050000000
Sum from 800000001 to 900000000= 85000000050000000
Total sum = 500000000500000000
 */