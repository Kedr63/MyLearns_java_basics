import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class Callable_and_Future_by_Zaur_1 {
  /* –ü—Ä–µ–¥–∏—Å–ª–æ–≤–∏–µ:
   * —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª 5! = 1*2*3*4*5 = 120*/
}

class RunnableFactorial {

  static int factorialResult;

  public static void main(String[] args) throws InterruptedException {
    ExecutorService executorService = Executors.newSingleThreadExecutor();
    Factorial factorial = new Factorial(5);
    executorService.execute(factorial);
    executorService.shutdown();
    executorService.awaitTermination(10,
        TimeUnit.SECONDS); /* –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–µ—Ä–∂–∏–º 10 —Å–µ–∫, —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç = 0 */
    System.out.println(factorialResult);

  }
}

class Factorial implements Runnable {
  int f;
  public Factorial(int f) {
    this.f = f;
  }
  @Override
  public void run() {
    if (f <= 0) {
      System.out.println("vi veli ne vernoe chislo");
      return;       /* –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞—à–µ–≥–æ –º–µ—Ç–æ–¥–∞ */
    }
    int result = 1;
    for (int i = 1; i <= f; i++) {
      result *= i;
    }
    RunnableFactorial.factorialResult = result;
  }
}

/** –ö–∞–∫–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –µ—Å—Ç—å —É —ç—Ç–æ–≥–æ –∫–æ–¥–∞? –ê –∏–º–µ–Ω–Ω–æ —á–µ–≥–æ –Ω–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤ Runnable? –ü—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
 * –≤–Ω–µ Runnable, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ result, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—É –∫–ª–∞—Å—Å–∞ RunnableFactorial, –∞ –≤—Å–µ –ø–æ—Ç–æ–º—É —á—Ç–æ
 * return type Runnable - void (–æ–Ω –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç). –¢–∞–∫–∂–µ –º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–±—Ä–æ—Å–∏—Ç—å –≤ –Ω–µ–º Exception, –∞ –æ—á–µ–Ω—å —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã.
 * –≠—Ç–æ –Ω–µ –¥–æ—Å—Ç–∞—Ç–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Runnable.
 *  üìç –•–æ—Ä–æ—à–∞—è –Ω–æ–≤–æ—Å—Ç—å: –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Callable üìç, –∫–æ—Ç–æ—Ä—ã–π –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂ –Ω–∞ Runnable, –Ω–æ –º–æ–∂–µ—Ç –≤ output-–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
 * –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è. –û–Ω —Å –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–º, –ø—Ä–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å —Å –∫–∞–∫–∏–º —Ç–∏–ø–æ–º –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å, —Ç.–µ –∫–∞–∫–æ–π
 * —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –≤ output-–µ —É –º–µ—Ç–æ–¥–∞ call(). –¢.–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Callable –∫–∞–∫ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Runnable –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π
 * –∫–∞–∫–æ–µ-—Ç–æ –∑–∞–¥–∞–Ω–∏–µ (—Ç–∞—Å–∫), –ö–û–¢–û–†–û–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨ –í–´–ü–û–õ–ù–ï–ù–ù–û –ü–û–¢–û–ö–û–ú
 *
 * –ò —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–æ—Ç –∂–µ –ø—Ä–∏–º–µ—Ä –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é Callable
 *   */
class CallableFactorial {

  static int factorialResult2;

  public static void main(String[] args) {
    ExecutorService executorService2 = Executors.newSingleThreadExecutor();
    Factorial2 factorial2 = new Factorial2(5);
    Future<Integer> future = executorService2.submit(factorial2);  /* —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∫–∞–∫ –∏ –º–µ—Ç–æ–¥ execute
   –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞—à —Ç–∞—Å–∫ –≤ Thread pool, –Ω–æ –ø–æ–º–∏–º–æ —ç—Ç–æ–≥–æ –æ–Ω –µ—â–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—à–µ–≥–æ —Ç–∞—Å–∫–∞ - (Integer).
   –≠—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –æ–±—ä–µ–∫—Ç–µ —Ç–∏–ø–∞ Future. –ò –∏–∑ –Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–∏–º —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ get  */
    try {
      factorialResult2 = future.get();
    } catch (InterruptedException e) {
      throw new RuntimeException(e);
    } catch (ExecutionException e) {
      System.out.println(e.getCause()); /** getCause –ø–æ–º–æ—â–µ—Ç —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è. –ê —á—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–∏—á–∏–Ω–∞ –ø–æ–∫–∞–∂–µ—Ç
       –≤–æ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /throw new Exception("vi veli ne vernoe chislo");/ –∏–∑ –º–µ—Ç–æ–¥–∞ call()   */
    }
    /* –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã –∑–∞–∫—Ä—ã–≤–∞–µ–º executorService, –∏ –ª—É—á—à–µ –µ–≥–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å finally-–±–ª–æ–∫–æ–º */
    finally {
      executorService2.shutdown();
    }
    System.out.println(factorialResult2);
  }
}

class Factorial2 implements Callable<Integer> {  /* –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å Integer */

  int f;

  public Factorial2(int f) {
    this.f = f;
  }

  @Override
  public Integer call() throws Exception {
    if (f <= 0) {
      throw new Exception("vi veli ne vernoe chislo");
    }
    int result = 1;
    for (int i = 1; i <= f; i++) {
      result *= i;
    }
    return result;
  }
}
/* üìå Callable, —Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ Runnable, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–±–æ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Ç–æ–∫–æ–º.
*     –í –æ—Ç–ª–∏—á–∏–∏ –æ—Ç Runnable Callable:
*        üìç –∏–º–µ–µ—Ç return type –Ω–µ void;
*        üìç –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è;
*
*  üìå –ú–µ—Ç–æ–¥ submit –ø–µ—Ä–µ–¥–∞–µ—Ç –Ω–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ (task) –≤ Thread pool, –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ–≥–æ –æ–¥–Ω–∏–º –∏–∑ –ø–æ—Ç–æ–∫–æ–≤,
*     –∏ –≤–æ–∑—Ä–∞—â–∞–µ—Ç —Ç–∏–ø Future, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.
*
*  üìå –ú–µ—Ç–æ–¥ get –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Future. */



