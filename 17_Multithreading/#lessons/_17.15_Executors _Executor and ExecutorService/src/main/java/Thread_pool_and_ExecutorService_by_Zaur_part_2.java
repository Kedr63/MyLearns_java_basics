import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class Thread_pool_and_ExecutorService_by_Zaur_part_2 {

  /** üìç ScheduledExecutorService –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–ø—É—Å–∫
  * –ø–æ—Ç–æ–∫–æ–≤ –∏–∑ –ø—É–ª–∞.
  * –î–∞–Ω–Ω—ã–π pool —Å–æ–∑–¥–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É—è factory –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞ Executors:
  * Executors.newScheduledThreadPool(int count)
  *
  * –ò —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –º–µ—Ç–æ–¥—ã:
  * üìç schedule
  * üìç scheduleAtFixedRate
  * üìç scheduleWithFixedDelay */
}

class ThreadPoolSchedule{
  public static void main(String[] args) {
    ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);
    /*for (int i = 0; i<10; i++){
      scheduledExecutorService.execute(new RunnableImp1200());
    }   —Å–º—ã—Å–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–¥–µ—Å—å execute –Ω–µ—Ç, —Ç.–∫. –¥–ª—è –Ω–µ–≥–æ —Ç–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–π–¥–µ—Ç ExecutorService  */

    scheduledExecutorService.schedule(new RunnableImp1200(), 3, TimeUnit.SECONDS);  /* –ó–¥–µ—Å—å –º—ã –≥–æ–≤–æ—Ä–∏–º
    scheduledExecutorService-—Å—É –≤—ã–ø–æ–ª–Ω–∏ —ç—Ç–æ—Ç —Ç–∞—Å–∫ - /new RunnableImp1200()/ —á–µ—Ä–µ–∑ 3 —Å–µ–∫  */
    scheduledExecutorService.shutdown();
  }
}

class ThreadPoolExScheduleAtFixedRate{
  public static void main(String[] args) throws InterruptedException {
    ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);
    scheduledExecutorService.scheduleAtFixedRate(new RunnableImp1200(), 3, 1, TimeUnit.SECONDS);
    /* –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    * –í–ø–µ—Ä–≤—ã–µ —ç—Ç–∞ –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –º–µ—Ç–æ–¥–∞ scheduleAtFixedRate –∏ –ø–æ—Ç–æ–º –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
    * —Å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é –≤ 1 —Å–µ–∫ (—Å–º. –∫–∞—Ä—Ç–∏–Ω–∫—É scheduleAtFixedRate.png)*/

    /* –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –≤ run() - Thread.sleep(500); */

    Thread.sleep(20000); /* –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ main –Ω–µ —É—Å—ã–ø–∏–º, —Ç–∞—Å–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –º–µ—Ç–æ–¥ shutdown —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É */
    scheduledExecutorService.shutdown();
  }
}

class ThreadPoolExScheduleWithFixedDelay{
  public static void main(String[] args) throws InterruptedException {
    ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);
    scheduledExecutorService.scheduleWithFixedDelay(new RunnableImp1200(), 3, 1, TimeUnit.SECONDS);
    /* –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ —Ç–µ–º, —á—Ç–æ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞—Å–∫–∞ –∏ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∞—Å–∫–∞
    * (—Å–º. –∫–∞—Ä—Ç–∏–Ω–∫—É scheduleWithFixedDelay.png) */

    Thread.sleep(20000); /* –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ main –Ω–µ —É—Å—ã–ø–∏–º, —Ç–∞—Å–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –º–µ—Ç–æ–¥ shutdown —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É */
    scheduledExecutorService.shutdown();
  }
}

/* –ï—â–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–∞–∫–æ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Thread Pool, –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤ —Å–µ–±–µ –Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏ –ø–æ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏ */
class ThreadPoolExNewCachedThreadPool{
  public static void main(String[] args) {
    ExecutorService executorService = Executors.newCachedThreadPool();

  }
}

class RunnableImp1200 implements Runnable {
  @Override
  public void run() {
    System.out.println(Thread.currentThread().getName() + "begins work");
    try {
      Thread.sleep(3000);
    } catch (InterruptedException e) {
      throw new RuntimeException(e);
    }
    System.out.println(Thread.currentThread().getName() + "ends work");
  }
}